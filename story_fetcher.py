import praw
import requests
import os
import uuid
import json
from deep_translator import GoogleTranslator
import spacy
from openai import OpenAI

# Configuraci√≥n de Reddit API
reddit = praw.Reddit(
    client_id="GYP67L7MTnQyAR4HkXXCSQ",
    client_secret="v7b-LL8UgAreVv2TEctRIe8_9Ockrg",
    user_agent="PodcastScraper/1.0",
    username="No-Panic7178",
    password="t2i86t7D9X_$$",
)

# Configuraci√≥n de OpenRouter
openrouter_key = (
    "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"
)
openrouter_url = "https://openrouter.ai/api/v1/chat/completions"

# Configuraci√≥n de DeepSeek
deepseek_key = "sk-df56fb823bbd4b24a6f2a8d9553b7dd0"
deepseek_url = "https://api.deepseek.com"

# Configuraci√≥n de APIs
client_deepseek = OpenAI(api_key=deepseek_key, base_url=deepseek_url)

# Cargar el modelo de spaCy con manejo de errores
try:
    nlp = spacy.load("es_core_news_sm")
    print("‚úÖ Modelo de spaCy cargado correctamente")
except OSError:
    print("‚ö†Ô∏è No se encontr√≥ el modelo de spaCy 'es_core_news_sm'. Intentando descargarlo...")
    try:
        import subprocess
        subprocess.run(["python", "-m", "spacy", "download", "es_core_news_sm"], check=True)
        nlp = spacy.load("es_core_news_sm")
        print("‚úÖ Modelo de spaCy descargado e instalado correctamente")
    except Exception as e:
        print(f"‚ùå Error al descargar el modelo: {str(e)}")
        print("‚ö†Ô∏è Usando un modelo gen√©rico como alternativa...")
        nlp = spacy.blank("es")  # Usar un modelo gen√©rico si no se puede descargar

# Mantener un registro de historias consultadas
historias_consultadas = set()


def crear_carpeta_historia():
    historia_id = str(uuid.uuid4())
    ruta = f"historias/{historia_id}"
    os.makedirs(ruta, exist_ok=True)
    return historia_id, ruta


def detectar_idioma(texto):
    try:
        if not texto or texto.isspace():
            print("‚ö†Ô∏è El texto para detectar el idioma est√° vac√≠o.")
            return "en"
        # Intentamos traducir al espa√±ol. Si funciona sin error, es otro idioma
        if GoogleTranslator(source="auto", target="es").translate(texto[:100]):
            return "en"
        return "es"
    except Exception as e:
        print(f"Error detectando idioma: {e}")
        return "en"


def traducir_a_espanol(texto):
    try:
        if not texto or texto.isspace():
            print("‚ö†Ô∏è El texto para traducir est√° vac√≠o.")
            return texto

        # Dividir el texto en chunks si es muy largo
        max_length = 4900
        if len(texto) > max_length:
            chunks = [
                texto[i : i + max_length] for i in range(0, len(texto), max_length)
            ]
            translated_chunks = []
            for chunk in chunks:
                translated_chunk = GoogleTranslator(
                    source="auto", target="es"
                ).translate(chunk)
                translated_chunks.append(translated_chunk)
            return " ".join(translated_chunks)
        else:
            return GoogleTranslator(source="auto", target="es").translate(texto)
    except Exception as e:
        print(f"Error traduciendo texto: {e}")
        return texto


def mejorar_historia(titulo, texto):
    prompt = f"""
    "Eres un experto en an√°lisis literario, narrativa envolvente y storytelling viral. 
‚Æû Tu doble funci√≥n ser√°:
   1) **Analizar** la historia para determinar:
    ‚Ä¢ G√©nero literario predominante (p. ej. misterio, terror psicol√≥gico, realismo m√°gico, drama g√≥tico, etc.).  
    ‚Ä¢ Recursos literarios clave que ya est√©n presentes o que mejor convengan (met√°fora, presagio, giro de tuerca, voz epistolar, narrador poco fiable, etc.).
   2) **Reescribir** la historia reforzando precisamente ese g√©nero y esos recursos para enganchar al p√∫blico.

üéØ **P√∫blico objetivo**
    ‚Ä¢ Edad: 18-45 (oyentes habituales de podcasts narrativos).  
    ‚Ä¢ Gustos: misterio, terror psicol√≥gico, drama, sucesos paranormales.  
    ‚Ä¢ Formato ideal: relato inmersivo con descripciones sensoriales.

üîß **Proceso detallado**
    0. _Identificaci√≥n_: Enumera en una l√≠nea el g√©nero detectado y dos-tres recursos literarios que potenciar√°s.  
    1. _T√≠tulo mejorado_: Intrigante, emocional, sin spoilers.  
    2. _Inmersi√≥n sensorial_: A√±ade sonidos, olores y atm√≥sferas que intensifiquen la tensi√≥n.  
    3. _Giros narrativos_: Incorpora revelaciones inesperadas alineadas con el g√©nero identificado.  
    4. _Final abierto_: Cierra con una inc√≥gnita que invite al debate y a futuras entregas.  
    5. _Preserva la esencia_: No alteres hechos clave del argumento; solo optimiza estructura, lenguaje y engagement.  
    6. _Limpieza de formato_: Elimina asteriscos, emojis o marcadores que interfieran con la lectura automatizada.  
    7. _Salida limpia_: No incluyas frases como ‚ÄúComienza el relato:‚Äù; entrega directamente el texto.  

üì• **Entrada**  
    ‚Ä¢ T√≠tulo original: {titulo}  
    ‚Ä¢ Texto original: {texto}

üì§ **Entrega**:
- En la primera l√≠nea, solo el t√≠tulo mejorado (sin marcadores como [T√≠tulo] o **)
- A partir de la segunda l√≠nea, solo el texto mejorado de la historia (sin marcadores ni formato adicional)

No incluyas en la salida final ninguna l√≠nea que contenga:
- Menciones al g√©nero detectado
- Recursos literarios
- L√≠neas separadoras (---)
- An√°lisis o comentarios sobre la historia
- Marcas de formato como **, [], etc.

Solo quiero ver:
1. T√≠tulo en la primera l√≠nea
2. Historia en las siguientes l√≠neas
"
    """
    try:
        # Usar DeepSeek como opci√≥n principal
        try:
            print("‚ú® Mejorando la historia con DeepSeek...")
            response = client_deepseek.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": prompt},
                ],
                stream=False,
            )
            return response.choices[0].message.content
        except Exception as e:
            print(f"Error con DeepSeek: {e}, intentando con OpenRouter...")

        # Si DeepSeek falla, usar OpenRouter como respaldo
        try:
            print("‚ú® Intentando con OpenRouter como respaldo...")
            headers = {
                "Authorization": f"Bearer {openrouter_key}",
                "Content-Type": "application/json",
            }
            data = {
                "model": "openai/gpt-4o-mini",
                "messages": [{"role": "user", "content": prompt}],
            }
            response = requests.post(openrouter_url, headers=headers, json=data)
            if response.status_code == 200:
                return response.json()["choices"][0]["message"]["content"]
        except Exception as e:
            print(f"Error con OpenRouter: {e}")
            return None

    except Exception as e:
        print(f"Error mejorando la historia: {e}")
        return None


def obtener_historia():
    historia_id, ruta = crear_carpeta_historia()
    try:
        subreddit = reddit.subreddit("nosleep")
        for post in subreddit.hot(limit=20):
            if post.id in historias_consultadas:
                continue

            if post.selftext:
                titulo = post.title
                historia = post.selftext

                if not historia or historia.isspace():
                    print(
                        "‚ùå El texto de la historia est√° vac√≠o. Saltando al siguiente post..."
                    )
                    continue

                idioma = detectar_idioma(historia)
                if idioma != "es":
                    print(f"üîç Idioma detectado: {idioma}. Traduciendo al espa√±ol...")
                    titulo = traducir_a_espanol(titulo)
                    historia = traducir_a_espanol(historia)
                    print("‚ú® Mejorando la historia con DeepSeek...")                      
                    historia_mejorada = mejorar_historia(titulo, historia)
                if historia_mejorada:
                    # Procesar la respuesta para eliminar los marcadores entre corchetes
                    lineas = historia_mejorada.splitlines()
                    
                    # Filtrar l√≠neas que contengan metadatos o formatos
                    lineas_filtradas = []
                    for linea in lineas:
                        # Ignorar l√≠neas con metadatos o formatos espec√≠ficos
                        if ("**G√©nero" in linea or 
                            "Recursos literarios" in linea or 
                            "Terror psicol√≥gico" in linea or
                            "misterio sobrenatural" in linea or
                            "Presagios" in linea or
                            "narrador poco fiable" in linea or
                            "atm√≥sfera claustrof√≥bica" in linea or
                            "---" == linea.strip() or
                            "[G√©nero" in linea or
                            "**T√≠tulo" in linea):
                            continue
                        
                        # Limpiar la l√≠nea de marcadores
                        linea_limpia = linea.replace("[", "").replace("]", "").replace("*", "").strip()
                        if linea_limpia:  # Solo a√±adir l√≠neas no vac√≠as
                            lineas_filtradas.append(linea_limpia)
                      # La primera l√≠nea debe ser el t√≠tulo, el resto es el contenido
                    if lineas_filtradas:
                        titulo_mejorado = lineas_filtradas[0].replace("T√≠tulo mejorado:", "").strip()
                        texto_mejorado = "\n".join(lineas_filtradas[1:]).replace("Texto mejorado:", "").strip()
                    else:
                        titulo_mejorado = titulo  # Usar el t√≠tulo original si no encontramos uno mejorado
                        texto_mejorado = historia  # Usar la historia original si no encontramos una mejorada
                        
                    with open(f"{ruta}/historia.txt", "w", encoding="utf-8") as f:
                        # Guardamos solo el t√≠tulo y el texto mejorado, sin ning√∫n formato
                        f.write(f"{titulo_mejorado}\n{texto_mejorado}")

                    with open(f"{ruta}/metadata.json", "w", encoding="utf-8") as f:
                        json.dump(
                            {
                                "id": historia_id,
                                "titulo": titulo_mejorado,
                                "ruta": ruta,
                            },
                            f,
                        )

                    with open(f"{ruta}/historia.json", "w", encoding="utf-8") as f:
                        json.dump(
                            {
                                "t√≠tulo": titulo_mejorado,
                                "historia": texto_mejorado,
                                "descripci√≥n": f"üìñ {titulo_mejorado}\n\n¬°Una historia de terror que te pondr√° los pelos de punta! üò±",
                                "hashtags": "#terrorparanodormir #miedoyterror #historiasterror #terror #miedo #paranormal #relatos",
                            },
                            f,
                            ensure_ascii=False,
                            indent=4,
                        )

                    historias_consultadas.add(post.id)
                    print(f"‚úÖ Historia mejorada guardada en {ruta}")
                    return historia_id, titulo_mejorado, texto_mejorado
    except Exception as e:
        print(f"Error obteniendo historia: {e}")
        return None, None, None

# apikey pexel
# 8hgXPG96C557Bahlc08hNveoB5rIBMBNz03f4q169KFWsMBuClHxeHha